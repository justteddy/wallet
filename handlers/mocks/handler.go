// Code generated by MockGen. DO NOT EDIT.
// Source: handler.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	types "github.com/justteddy/wallet/types"
)

// MockwalletGenerator is a mock of walletGenerator interface.
type MockwalletGenerator struct {
	ctrl     *gomock.Controller
	recorder *MockwalletGeneratorMockRecorder
}

// MockwalletGeneratorMockRecorder is the mock recorder for MockwalletGenerator.
type MockwalletGeneratorMockRecorder struct {
	mock *MockwalletGenerator
}

// NewMockwalletGenerator creates a new mock instance.
func NewMockwalletGenerator(ctrl *gomock.Controller) *MockwalletGenerator {
	mock := &MockwalletGenerator{ctrl: ctrl}
	mock.recorder = &MockwalletGeneratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockwalletGenerator) EXPECT() *MockwalletGeneratorMockRecorder {
	return m.recorder
}

// Generate mocks base method.
func (m *MockwalletGenerator) Generate() (types.WalletID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generate")
	ret0, _ := ret[0].(types.WalletID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Generate indicates an expected call of Generate.
func (mr *MockwalletGeneratorMockRecorder) Generate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generate", reflect.TypeOf((*MockwalletGenerator)(nil).Generate))
}

// Mockstorage is a mock of storage interface.
type Mockstorage struct {
	ctrl     *gomock.Controller
	recorder *MockstorageMockRecorder
}

// MockstorageMockRecorder is the mock recorder for Mockstorage.
type MockstorageMockRecorder struct {
	mock *Mockstorage
}

// NewMockstorage creates a new mock instance.
func NewMockstorage(ctrl *gomock.Controller) *Mockstorage {
	mock := &Mockstorage{ctrl: ctrl}
	mock.recorder = &MockstorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockstorage) EXPECT() *MockstorageMockRecorder {
	return m.recorder
}

// CreateWallet mocks base method.
func (m *Mockstorage) CreateWallet(ctx context.Context, wallet types.WalletID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWallet", ctx, wallet)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateWallet indicates an expected call of CreateWallet.
func (mr *MockstorageMockRecorder) CreateWallet(ctx, wallet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWallet", reflect.TypeOf((*Mockstorage)(nil).CreateWallet), ctx, wallet)
}

// Deposit mocks base method.
func (m *Mockstorage) Deposit(ctx context.Context, wallet types.WalletID, amount int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deposit", ctx, wallet, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// Deposit indicates an expected call of Deposit.
func (mr *MockstorageMockRecorder) Deposit(ctx, wallet, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deposit", reflect.TypeOf((*Mockstorage)(nil).Deposit), ctx, wallet, amount)
}

// Operations mocks base method.
func (m *Mockstorage) Operations(ctx context.Context, wallet types.WalletID, opType types.OperationType, from, to time.Time) ([]types.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Operations", ctx, wallet, opType, from, to)
	ret0, _ := ret[0].([]types.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Operations indicates an expected call of Operations.
func (mr *MockstorageMockRecorder) Operations(ctx, wallet, opType, from, to interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Operations", reflect.TypeOf((*Mockstorage)(nil).Operations), ctx, wallet, opType, from, to)
}

// Transfer mocks base method.
func (m *Mockstorage) Transfer(ctx context.Context, fromWallet, toWallet types.WalletID, amount int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transfer", ctx, fromWallet, toWallet, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// Transfer indicates an expected call of Transfer.
func (mr *MockstorageMockRecorder) Transfer(ctx, fromWallet, toWallet, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transfer", reflect.TypeOf((*Mockstorage)(nil).Transfer), ctx, fromWallet, toWallet, amount)
}

// Mockexporter is a mock of exporter interface.
type Mockexporter struct {
	ctrl     *gomock.Controller
	recorder *MockexporterMockRecorder
}

// MockexporterMockRecorder is the mock recorder for Mockexporter.
type MockexporterMockRecorder struct {
	mock *Mockexporter
}

// NewMockexporter creates a new mock instance.
func NewMockexporter(ctrl *gomock.Controller) *Mockexporter {
	mock := &Mockexporter{ctrl: ctrl}
	mock.recorder = &MockexporterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockexporter) EXPECT() *MockexporterMockRecorder {
	return m.recorder
}

// Export mocks base method.
func (m *Mockexporter) Export(format types.ExportFormat, ops []types.Operation) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Export", format, ops)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Export indicates an expected call of Export.
func (mr *MockexporterMockRecorder) Export(format, ops interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Export", reflect.TypeOf((*Mockexporter)(nil).Export), format, ops)
}
